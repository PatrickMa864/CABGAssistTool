#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>

// ---------------------- Pin Definitions ----------------------
#define MotorDirection 7
#define MotorSpeed     6  // PWM pin
#define PotPin         A1 // Linear potentiometer input

// ---------------------- BNO055 Setup ----------------------
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);

// Offsets for zeroing BNO055 angles
float headingOffset = 0.0;
float rollOffset    = 0.0;
float pitchOffset   = 0.0;

// Variables to store potentiometer values
float voltage;
float wiperPosition;

// --------------------------------------------------------------------
// 'toolDistance'
// This will be the distance (mm) we receive from Python.
// --------------------------------------------------------------------
float toolDistance = 0.0;

// Timing variables for printing
unsigned long lastPrintTime = 0;
const unsigned long printInterval = 100;

void setup() {
  Serial.begin(115200); // Ensure the baud rate matches in Serial Monitor

  // ---------------------- Motor Setup ----------------------
  pinMode(MotorDirection, OUTPUT);
  pinMode(MotorSpeed, OUTPUT);
  digitalWrite(MotorDirection, LOW);
  analogWrite(MotorSpeed, 0);

  // ---------------------- BNO055 Setup ----------------------
  if (!bno.begin()) {
    Serial.println("No BNO055 detected! Check wiring/I2C address.");
    while (1);
  }

  bno.setExtCrystalUse(true); // Use external crystal for accuracy
  delay(1000);

  Serial.println("BNO055 & Motor Control System Ready.");
  Serial.println("Send 'z' in Serial Monitor to zero (tare) BNO055 angles.");
  Serial.println("Output format: heading,roll,pitch,sys,gyro,accel,mag,wiperPosition,motorPWM\n");
}

void loop() {
  // ---------------------- Read from Serial ----------------------
  if (Serial.available() > 0) {
    char incomingChar = Serial.read();
    if (incomingChar == 'z' || incomingChar == 'Z') {
      // Zero (tare) BNO055 angles
      sensors_event_t orientationData;
      bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);

      headingOffset = orientationData.orientation.x;
      rollOffset    = orientationData.orientation.y;
      pitchOffset   = orientationData.orientation.z;

      Serial.println("BNO055 angles zeroed!");
    } 
    else {
      // Parse float distance coming from Python
      float newDist = Serial.parseFloat();
      if (!isnan(newDist)) {
        toolDistance = newDist;
      }
    }
  }

  // ---------------------- Read Potentiometer  ----------------------
  int potValue = analogRead(PotPin);

  wiperPosition = 100 * 1.5* (potValue)/1023.0;

  // --------------------------------------------------------------------
  // Motor Control Logic:
  // We want to keep toolDistance == 10 mm.
  // If the distance > 30 mm, we stop the motor completely.
  // Otherwise, a simple P-like action:
  //
  //   error = 10 - toolDistance
  //   motorSpeedValue ~ |error| scaled to 0..255
  // --------------------------------------------------------------------
  float motorSpeedValue = 0.0;
  const float desiredDistance = 10.0;  // mm

  if (toolDistance > 30.0) {
    // Distance is too large, so stop actuation
    motorSpeedValue = 0.0;
  } else {
    // Basic P control
    float error = desiredDistance - toolDistance;
    motorSpeedValue = fabs(error) * 255.0;  // Very rough scaling
    if (motorSpeedValue > 255.0) {
      motorSpeedValue = 255.0;
    }

    // Direction depends on the sign of 'error'
    if (error >= 0) {
      digitalWrite(MotorDirection, HIGH); // Forward
    } else {
      digitalWrite(MotorDirection, LOW);  // Reverse
    }
  }

  // Apply motor command
  analogWrite(MotorSpeed, (int)motorSpeedValue);

  // ---------------------- Read BNO055 Orientation (unchanged) ----------------------
  sensors_event_t orientationData;
  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);

  float heading = orientationData.orientation.x - headingOffset;
  float roll    = orientationData.orientation.y - rollOffset;
  float pitch   = orientationData.orientation.z - pitchOffset;

  // ---------------------- Get Calibration Status ----------------------
  uint8_t sysCal, gyroCal, accelCal, magCal;
  bno.getCalibration(&sysCal, &gyroCal, &accelCal, &magCal);

  // ---------------------- Print Data (Every 100ms) ----------------------
  unsigned long currentTime = millis();
  if (currentTime - lastPrintTime >= printInterval) {
    Serial.print(heading); Serial.print(",");
    Serial.print(roll); Serial.print(",");
    Serial.print(pitch); Serial.print(",");
    Serial.print(sysCal); Serial.print(",");
    Serial.print(gyroCal); Serial.print(",");
    Serial.print(accelCal); Serial.print(",");
    Serial.print(magCal); Serial.print(",");
    Serial.print(wiperPosition); Serial.print(",");
    Serial.println((int)motorSpeedValue);
    lastPrintTime = currentTime;
  }
}
