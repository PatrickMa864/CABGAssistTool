function live_robot_animation_fast_with_offsets_zero_heartpoint()

    %% 1) SET UP SERIAL PORT
    portName = 'COM3';  % Change as needed (check Device Manager)
    baudRate = 115200;
    s = serialport(portName, baudRate);
    configureTerminator(s, 'LF');

    %% 1A) CREATE FIGURE AND ENABLE KEY PRESS + ROTATION
    f = figure('Name','Live Robot Animation','NumberTitle','off');
    f.Position(3:4) = [1000 600];  % optional: widen figure
    movegui(f,'center');
    
    % Enable the figure for user rotation
    rotate3d(f, 'on');

    % Assign a KeyPressFcn that sends 'z' to the Arduino if user presses Z
    f.KeyPressFcn = @(src,evt) figureKeyPressCallback(src,evt,s);

    hold on;
    axis equal;
    grid on;
    xlabel('X'); ylabel('Y'); zlabel('Z');
    view(3);

    %% 2) PLOT BASE FRAME & CREATE PLOT OBJECTS
    BRF_pt = [40.2 - 13.5, 21.0, 0];
    plotunitvector(BRF_pt, [1;0;0], [0;1;0], [0;0;1], 10);

    % Single line for the robot's links
    hRobot = plot3(nan, nan, nan, 'o-','LineWidth',2,'MarkerSize',6,...
                   'Color','k','MarkerFaceColor','r');

    % Quivers for the end-effector orientation
    scale = 5;
    effectorAxes.x = quiver3(0,0,0,0,0,0,'r','LineWidth',2);
    effectorAxes.y = quiver3(0,0,0,0,0,0,'g','LineWidth',2);
    effectorAxes.z = quiver3(0,0,0,0,0,0,'b','LineWidth',2);

    axis([-100 100 -100 100 -50 100]);
    hTitle = title('Initializing...');

    %% 3) SET REFERENCE "HEART" POINT
    % Change this to your desired location in the global (base) frame:
    heartPt = [10, 10, 0];

    % Plot a small marker or shape at the heart point for reference
    plot3(heartPt(1), heartPt(2), heartPt(3), 'ms', 'MarkerSize',10, 'MarkerFaceColor','m');

    %% 4) ROBOT LINK CONSTANTS / DH Setup
    l01A = 26.1; d01 = 0;  l01B = 0;
    l45A = 10.1; l45B = 11.5;
    l56A = 1;    d56potentiometer = 2; l56B = 1;

    %% 5) MAIN LOOP
    for i = 1:2000
        
        % 5A) Read & parse the CSV line: heading, roll, pitch, sysCal, gyroCal, accelCal, magCal
        dataLine = readline(s);
        angleValues = str2double(strsplit(dataLine, ','));
        if numel(angleValues) < 7, continue; end
        
        headingDeg = angleValues(1);
        rollDeg    = angleValues(3);
        pitchDeg   = angleValues(2);
        sysCal     = angleValues(4);
        gyroCal    = angleValues(5);
        accelCal   = angleValues(6);
        magCal     = angleValues(7);

        % Convert to radians
        heading = deg2rad(headingDeg);
        roll    = deg2rad(rollDeg);
        pitch   = deg2rad(pitchDeg);

        % 5B) Offsets for L-shape
        theta2_yaw   = heading;    % or heading + deg2rad(90) if you want
        theta3_pitch = pitch;      % or pitch   + deg2rad(90)
        theta4_roll  = roll;

        % 5C) DH parameters
        dhparams = [
            0       0       (l01A + d01 + l01B)    0
            0       pi/2    0                      theta2_yaw + pi/2
            0       pi/2    0                      theta3_pitch + pi/4
            0       0       0                      theta4_roll
            l45A    0       l45B                   0
            % Possibly more links...
        ];

        % Compute partial transforms
        n = size(dhparams, 1);
        partialT = cell(n+1,1);
        partialT{1} = eye(4);
        for j = 1:n
            a     = dhparams(j,1);
            alpha = dhparams(j,2);
            d     = dhparams(j,3);
            theta = dhparams(j,4);
            Tj = JointTransformation(a, alpha, d, theta);
            partialT{j+1} = partialT{j} * Tj;
        end
        
        % 5D) Collect joint positions
        jointPositions = zeros(n+1,3);
        for j = 1:n+1
            transVec = partialT{j}(1:3,4)';
            jointPositions(j,:) = BRF_pt + transVec;
        end
        
        % Robot end-effector = last joint
        p_ee = jointPositions(end,:);

        % 5E) Update the line object for the robot
        set(hRobot, 'XData', jointPositions(:,1), ...
                    'YData', jointPositions(:,2), ...
                    'ZData', jointPositions(:,3));

        % End-effector orientation
        R_ee = partialT{end}(1:3,1:3);
        updateQuiver3(effectorAxes.x, p_ee, R_ee(:,1), scale);
        updateQuiver3(effectorAxes.y, p_ee, R_ee(:,2), scale);
        updateQuiver3(effectorAxes.z, p_ee, R_ee(:,3), scale);

        % 5F) Compute tip relative to heart
        tipCoordRel = p_ee - heartPt;  % [dx, dy, dz]

        % Update figure title with angles, calibration, and tip offset
        set(hTitle, 'String', sprintf( ...
            ['Heading=%.1f°, Roll=%.1f°, Pitch=%.1f°  |  Cal: %d,%d,%d,%d\n' ...
             'Tip wrt Heart = (%.1f, %.1f, %.1f)'], ...
            headingDeg, rollDeg, pitchDeg, ...
            sysCal, gyroCal, accelCal, magCal, ...
            tipCoordRel(1), tipCoordRel(2), tipCoordRel(3)));

        % 5G) Draw with minimal overhead, but still interactive
        drawnow limitrate
    end

    % Close serial
    clear s;
end

%% --- Figure KeyPress callback: if user presses 'z', send 'z' to Arduino ---
function figureKeyPressCallback(~, evt, serialObj)
    if strcmpi(evt.Key, 'z')
        % Send 'z' over serial to Arduino to trigger zeroing
        writeline(serialObj, 'z');
        disp('Sent "z" to Arduino for zeroing the BNO055.');
    end
end

%% --- DH Transformation ---
function T = JointTransformation(a, alpha, d, theta)
    T = [ cos(theta), -sin(theta)*cos(alpha),  sin(theta)*sin(alpha),  a*cos(theta);
          sin(theta),  cos(theta)*cos(alpha), -cos(theta)*sin(alpha),  a*sin(theta);
          0,           sin(alpha),            cos(alpha),              d;
          0,           0,                     0,                       1];
end

%% --- Plot static coordinate frame vectors ---
function plotunitvector(pt, ux, uy, uz, scale)
    if nargin<5, scale=5; end
    quiver3(pt(1),pt(2),pt(3), scale*ux(1),scale*ux(2),scale*ux(3), 'r','LineWidth',2);
    quiver3(pt(1),pt(2),pt(3), scale*uy(1),scale*uy(2),scale*uy(3), 'g','LineWidth',2);
    quiver3(pt(1),pt(2),pt(3), scale*uz(1),scale*uz(2),scale*uz(3), 'b','LineWidth',2);
end

%% --- Update an existing quiver3 handle ---
function updateQuiver3(h, origin, direction, scale)
    set(h, 'XData', origin(1), 'YData', origin(2), 'ZData', origin(3), ...
           'UData', scale*direction(1), ...
           'VData', scale*direction(2), ...
           'WData', scale*direction(3));
end
