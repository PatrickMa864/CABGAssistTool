function live_robot_animation_with_jointaxes()

    %% 1) SET UP SERIAL PORT
    portName = 'COM3';  % <-- Make sure this matches your actual Arduino COM port
    baudRate = 115200;
    
    s = serialport(portName, baudRate);
    configureTerminator(s, 'LF');

    %% 2) FIGURE FOR PLOTTING
    figure('Name','Live Robot Animation','NumberTitle','off');
    hold on;
    axis equal;
    xlabel('X'); ylabel('Y'); zlabel('Z');
    title('Live Robot Tip Position');
    view(3);
    
    % (Optional) If you want a reference plane:
    % [X, Y] = meshgrid(0:40.2, 0:80.4);
    % Z = zeros(size(X));
    % surf(X, Y, Z, 'FaceAlpha', 0.5);

    %% 3) ROBOT LINK CONSTANTS (example from your code)
    l01A = 26.1; 
    d01  = 0;  
    l01B = 0;
    l45A = 10.1; 
    l45B = 11.5;
    l56A = 1;    
    d56potentiometer = 2; 
    l56B = 1;
    
    % Base reference offset
    BRF_pt = [40.2 - 13.5, 21.0, 0];
    
    %% 4) MAIN LOOP TO READ ARDUINO GYRO ANGLES & UPDATE
    for i = 1:1000  % or while(true), etc.
        
        % ---- 4A) Read angles from serial (CSV line: "heading,roll,pitch,sysCal,gyroCal,accelCal,magCal") ----
        % Example line from Arduino: "12.34,-5.67,1.23,3,3,2,3"
        dataLine = readline(s); 
        angleValues = str2double(strsplit(dataLine, ','));
        
        % Expect 7 values in total
        if numel(angleValues) < 7
            % If malformed, skip
            continue;  
        end
        
        % Parse the 7 fields
        headingDeg = angleValues(1);
        rollDeg    = angleValues(2);
        pitchDeg   = angleValues(3);
        sysCal     = angleValues(4);
        gyroCal    = angleValues(5);
        accelCal   = angleValues(6);
        magCal     = angleValues(7);
        
        % Convert from degrees to radians (for the first three)
        heading = deg2rad(headingDeg);
        roll    = deg2rad(rollDeg);
        pitch   = deg2rad(pitchDeg);

        % ---- 4B) Map these BNO angles to your DH angles ----
        % Example: heading -> theta2 (yaw), pitch -> theta3, roll -> theta4
        theta2_yaw   = heading;
        theta3_pitch = pitch;
        theta4_roll  = roll;
        
        % Example DH table (adapt as needed for your robot)
        %           a       alpha   d                       theta
        dhparams = [
            0       0       (l01A + d01 + l01B)            0
            0       pi/2    0                              theta2_yaw
            0       pi/2    0                              theta3_pitch
            0       0       0                              theta4_roll
            l45A    0       l45B                           0
            % If you have a last link:
            %0       0       (l56A + d56potentiometer + l56B)  0
        ];
        
        % ---- 4C) Compute partial transformations for each joint ----
        n = size(dhparams, 1);
        
        % We'll store the transform from the *base* to each joint in partialT{i}
        partialT = cell(n+1, 1);  
        partialT{1} = eye(4);  % base frame is identity

        for j = 1:n
            a     = dhparams(j,1);
            alpha = dhparams(j,2);
            d     = dhparams(j,3);
            theta = dhparams(j,4);
            
            Tj = JointTransformation(a, alpha, d, theta);
            partialT{j+1} = partialT{j} * Tj;
        end
        
        % partialT{end} is the final end-effector transform from the base frame.
        
        % ---- 4D) Collect all joint positions in 3D space ----
        jointPositions = zeros(n+1, 3);
        for j = 1:n+1
            % translation from partial transform
            transVec = partialT{j}(1:3,4)'; 
            % add base offset
            jointPositions(j,:) = BRF_pt + transVec; 
        end
        
        % ---- 4E) Clear & Redraw the entire robot scene ----
        cla;  % clear the axes for simplicity

        % (Optional) Re-draw the plane
        % surf(X, Y, zeros(size(X)), 'FaceAlpha', 0.5); hold on;

        % Plot the base coordinate system
        plotunitvector(BRF_pt, [1 0 0], [0 1 0], [0 0 1]);
        
        % Plot the connected joints (a line from base -> J1 -> ... -> End-effector)
        plot3(jointPositions(:,1), jointPositions(:,2), jointPositions(:,3), ...
              'o-', 'LineWidth', 2, 'MarkerSize', 6, 'Color','k',...
              'MarkerFaceColor','r');
        
        % ---- 4F) Plot orientation axes at each joint ----
        for j = 1:n+1
            p_j = jointPositions(j,:);
            R_j = partialT{j}(1:3, 1:3);  % rotation matrix from base to joint j
            
            x_axis = R_j(:,1);
            y_axis = R_j(:,2);
            z_axis = R_j(:,3);

            plotunitvector(p_j, x_axis, y_axis, z_axis);
        end
        
        % ---- 4G) Update figure title with angles + calibration status ----
        titleStr = sprintf('Heading=%.1f°, Roll=%.1f°, Pitch=%.1f° | Cal: sys=%d, gyro=%d, accel=%d, mag=%d',...
                           headingDeg, rollDeg, pitchDeg,...
                           sysCal, gyroCal, accelCal, magCal);
        title(titleStr);
        
        axis equal;
        axis([-100 100 -100 100 -50 100]);  % Adjust as needed
        xlabel('X'); ylabel('Y'); zlabel('Z');
        drawnow;
    end
    
    % Close the serial port after the loop:
    clear s;  % or delete(s);

end

%% --- DH Transformation Matrix ---
function T = JointTransformation(a, alpha, d, theta)
    T = [ cos(theta),             -sin(theta)*cos(alpha),    sin(theta)*sin(alpha),   a*cos(theta);
          sin(theta),             cos(theta)*cos(alpha),     -cos(theta)*sin(alpha),  a*sin(theta);
          0,                      sin(alpha),                cos(alpha),              d;
          0,                      0,                         0,                       1];
end

%% --- Plot unit vectors from a given point ---
function plotunitvector(pt, ux, uy, uz)
    % scale them for visibility
    scale = 5; 
    quiver3(pt(1), pt(2), pt(3), scale*ux(1), scale*ux(2), scale*ux(3), ...
            'Color','r','LineWidth',1.5);
    quiver3(pt(1), pt(2), pt(3), scale*uy(1), scale*uy(2), scale*uy(3), ...
            'Color','g','LineWidth',1.5);
    quiver3(pt(1), pt(2), pt(3), scale*uz(1), scale*uz(2), scale*uz(3), ...
            'Color','b','LineWidth',1.5);
end
