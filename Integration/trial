#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include <math.h>

// ---------------------- Pin Definitions ----------------------
#define MotorDirection 7
#define MotorSpeed     6  // PWM pin
#define PotPin         A1 // Linear potentiometer input

// ---------------------- BNO055 Setup ----------------------
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);

// Offsets for zeroing BNO055 angles
float headingOffset = 0.0;
float rollOffset    = 0.0;
float pitchOffset   = 0.0;

// ---------------------- Global Kinematics Variables ----------------------
const float l01A = 261 + 11.3; // 272.3 mm
const float d01  = 0.0;
const float l01B = 0.0;
const float l45A = 91.0;
const float l45B = 0.0;
const float l56A = 20.0;
const float l56B = 205 + 24.34; // 229.34 mm

const float BRF_pt[3] = {118.0, 296.5, 0.0};   // base offset
float dotPt[3]  = {347.5, 279.7, 175.0};       // "heart" location

// Desired distance from tool to heart (in mm)
const float desiredDistance = 80.0;

// Kp for distance error => motor speed
float Kp = 2.0;  

// If error is smaller than this, we stop the motor (deadband)
const float deadband = 2.0; 

// We will store the forward kinematics result (tool pos)
float dist_tool_dot = 110.0;
float error = 0.0;

// ---------------------- Helper Functions ----------------------

// 4x4 matrix multiply: C = A * B
void matMult(float A[4][4], float B[4][4], float C[4][4]) {
  for (int i = 0; i < 4; i++){
    for (int j = 0; j < 4; j++){
      C[i][j] = 0;
      for (int k = 0; k < 4; k++){
        C[i][j] += A[i][k] * B[k][j];
      }
    }
  }
}

// Standard DH transform
void jointTransformation(float a, float alpha, float d, float theta, float T[4][4]) {
  T[0][0] = cos(theta);
  T[0][1] = -sin(theta)*cos(alpha);
  T[0][2] = sin(theta)*sin(alpha);
  T[0][3] = a*cos(theta);

  T[1][0] = sin(theta);
  T[1][1] = cos(theta)*cos(alpha);
  T[1][2] = -cos(theta)*sin(alpha);
  T[1][3] = a*sin(theta);

  T[2][0] = 0;
  T[2][1] = sin(alpha);
  T[2][2] = cos(alpha);
  T[2][3] = d;

  T[3][0] = 0;
  T[3][1] = 0;
  T[3][2] = 0;
  T[3][3] = 1;
}

void setup() {
  Serial.begin(115200);

  pinMode(MotorDirection, OUTPUT);
  pinMode(MotorSpeed, OUTPUT);
  digitalWrite(MotorDirection, LOW);
  analogWrite(MotorSpeed, 0);

  if (!bno.begin()) {
    Serial.println("No BNO055 found");
    while (1);
  }
  bno.setExtCrystalUse(true);
  delay(1000);

  Serial.println("Distance-based P-control ready.");
  Serial.println("Type 'z' or 'Z' to zero BNO055 angles, or send 'x,y,z' to move dotPt.");
}

void loop() {
  // ---------------------- Read Serial Commands ----------------------
  if (Serial.available() > 0) {
    String line = Serial.readStringUntil('\n');
    line.trim();
    if (line.startsWith("z") || line.startsWith("Z")) {
      sensors_event_t orientationData;
      bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
      headingOffset = orientationData.orientation.x;
      rollOffset    = orientationData.orientation.y;
      pitchOffset   = orientationData.orientation.z;
      Serial.println("Zeroed angles!");
    } else {
      // Possibly parse "x,y,z" for dotPt
      int firstComma = line.indexOf(',');
      int secondComma = line.indexOf(',', firstComma+1);
      if (firstComma>0 && secondComma>firstComma) {
        String xStr = line.substring(0, firstComma);
        String yStr = line.substring(firstComma+1, secondComma);
        String zStr = line.substring(secondComma+1);
        dotPt[0] = xStr.toFloat();
        dotPt[1] = yStr.toFloat();
        dotPt[2] = zStr.toFloat();
        Serial.print("dotPt updated to: ");
        Serial.print(dotPt[0]); Serial.print(",");
        Serial.print(dotPt[1]); Serial.print(",");
        Serial.println(dotPt[2]);
      }
    }
  }

  // ---------------------- Pot Scaling (not used in this logic, but good to keep) -----------
  int potValue = analogRead(PotPin);
  float potExtension = ((float)potValue / 1023.0) * 1.5 * 100.0; 

  // ---------------------- Read BNO055 for Euler angles ----------------------
  sensors_event_t orientationData;
  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);

  float heading = (orientationData.orientation.x - headingOffset)*(M_PI/180.0);
  float pitch   = (orientationData.orientation.z - pitchOffset)*(M_PI/180.0);
  float roll    = (orientationData.orientation.y - rollOffset)*(M_PI/180.0);

  // ---------------------- Forward Kinematics ----------------------
  float T1[4][4], T2[4][4], T3[4][4], T4[4][4], T5[4][4], T6[4][4], T7[4][4];
  float T_temp1[4][4], T_temp2[4][4], T_temp3[4][4], T_temp4[4][4], T_temp5[4][4], T_total[4][4];

  jointTransformation(0, 0, l01A, 0, T1);
  jointTransformation(0, M_PI/2.0, 0, heading, T2);
  jointTransformation(0, M_PI/2.0, 0, pitch + (M_PI/2.0), T3);
  jointTransformation(0, 0, 0, roll, T4);
  jointTransformation(l45A, 0, 0, 0, T5);
  jointTransformation(0, 0, l45B, 0, T6);
  jointTransformation(0, 0, (potExtension + l56A + l56B), 0, T7);

  matMult(T1, T2, T_temp1);
  matMult(T_temp1, T3, T_temp2);
  matMult(T_temp2, T4, T_temp3);
  matMult(T_temp3, T5, T_temp4);
  matMult(T_temp4, T6, T_temp5);
  matMult(T_temp5, T7, T_total);

  // End-effector position
  float p_ee[3];
  p_ee[0] = T_total[0][3] + BRF_pt[0];
  p_ee[1] = T_total[1][3] + BRF_pt[1];
  p_ee[2] = T_total[2][3] + BRF_pt[2];

  // Distance from tool to dotPt
  float dx = p_ee[0] - dotPt[0];
  float dy = p_ee[1] - dotPt[1];
  float dz = p_ee[2] - dotPt[2];
  dist_tool_dot = sqrtf(dx*dx + dy*dy + dz*dz);

  // ---------------------- P-like Distance Control ----------------------
  //  error = (desiredDistance - currentDistance)
  error = desiredDistance - dist_tool_dot;

  // Deadband
  float absError = fabs(error);
  float motorSpeed = 0.0;
  if (absError < deadband) {
    // Very close => no movement
    motorSpeed = 0.0;
  } else {
    // Scale speed by Kp
    motorSpeed = absError * (255.0*Kp/10.0);  
    // 'Kp/10.0' is just a guess to keep the speed in a comfortable range
    // Adjust as needed 
    if (motorSpeed > 255.0) motorSpeed = 255.0;
  }

  // Direction
  if (error >= 0) {
    // Tool is too far => move "forward" to reduce distance
    digitalWrite(MotorDirection, HIGH);
  } else {
    // Tool is too close => move "back"
    digitalWrite(MotorDirection, LOW);
  }

  analogWrite(MotorSpeed, (int)motorSpeed);

  // ---------------------- Debug Print ----------------------
  static unsigned long lastPrint = 0;
  unsigned long now = millis();
  if (now - lastPrint >= 200) {
    lastPrint = now;
    Serial.print("Dist=");
    Serial.print(dist_tool_dot, 2);
    Serial.print(" Err=");
    Serial.print(error, 2);
    Serial.print(" MotorPWM=");
    Serial.println((int)motorSpeed);
  }

  delay(20); // ~50 Hz control
}
